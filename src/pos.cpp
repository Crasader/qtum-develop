// Copyright (c) 2012-2013 The PPCoin developers
// Copyright (c) 2014 The BlackCoin developers
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <boost/assign/list_of.hpp>

#include <pos.h>
#include <txdb.h>
#include <validation.h>
#include <arith_uint256.h>
#include <hash.h>
#include <timedata.h>
#include <chainparams.h>
#include <script/sign.h>
#include <consensus/consensus.h>
#include <openssl/bn.h>

using namespace std;

// Stake Modifier (hash modifier of proof-of-stake):
// The purpose of stake modifier is to prevent a txout (coin) owner from
// computing future proof-of-stake generated by this txout at the time
// of transaction confirmation. To meet kernel protocol, the txout
// must hash with a future stake modifier to generate the proof.
uint256 ComputeStakeModifier(const CBlockIndex* pindexPrev, const uint256& kernel)
{
    if (!pindexPrev)
        return uint256();  // genesis block's modifier is 0

    CDataStream ss(SER_GETHASH, 0);
    ss << kernel << pindexPrev->nStakeModifier;
    return Hash(ss.begin(), ss.end());
}

// BlackCoin kernel protocol
// coinstake must meet hash target according to the protocol:
// kernel (input 0) must meet the formula
//     hash(nStakeModifier + blockFrom.nTime + txPrev.vout.hash + txPrev.vout.n + nTime) < bnTarget * nWeight
// this ensures that the chance of getting a coinstake is proportional to the
// amount of coins one owns.
// The reason this hash is chosen is the following:
//   nStakeModifier: scrambles computation to make it very difficult to precompute
//                   future proof-of-stake
//   blockFrom.nTime: slightly scrambles computation
//   txPrev.vout.hash: hash of txPrev, to reduce the chance of nodes
//                     generating coinstake at the same time
//   txPrev.vout.n: output number of txPrev, to reduce the chance of nodes
//                  generating coinstake at the same time
//   nTime: current timestamp
//   block/tx hash should not be used here as they can be generated in vast
//   quantities so as to generate blocks faster, degrading the system back into
//   a proof-of-work situation.
//
bool CheckStakeKernelHash(CBlockIndex* pindexPrev, unsigned int nBits, uint32_t blockFromTime, CAmount prevoutValue, const COutPoint& prevout, unsigned int nTimeBlock, uint256& hashProofOfStake, uint256& targetProofOfStake, bool fPrintProofOfStake)
{
    if (nTimeBlock < blockFromTime)  // Transaction timestamp violation
        return error("CheckStakeKernelHash() : nTime violation");

    // Base target
    arith_uint256 bnTarget;
    bnTarget.SetCompact(nBits);

    // Weighted target
    int64_t nValueIn = prevoutValue;
    arith_uint256 bnWeight = arith_uint256(nValueIn);
    bnTarget *= bnWeight;

    targetProofOfStake = ArithToUint256(bnTarget);

    uint256 nStakeModifier = pindexPrev->nStakeModifier;

    // Calculate hash
    CDataStream ss(SER_GETHASH, 0);
    ss << nStakeModifier;
    ss << blockFromTime << prevout.hash << prevout.n << nTimeBlock;
    hashProofOfStake = Hash(ss.begin(), ss.end());

    if (fPrintProofOfStake)
    {
        LogPrintf("CheckStakeKernelHash() : check modifier=%s nTimeBlockFrom=%u nPrevout=%u nTimeBlock=%u hashProof=%s\n",
            nStakeModifier.GetHex().c_str(),
            blockFromTime, prevout.n, nTimeBlock,
            hashProofOfStake.ToString());
    }

    // Now check if proof-of-stake hash meets target protocol
    if (UintToArith256(hashProofOfStake) > bnTarget)
        return false;

    if (logCategories & BCLog::COINSTAKE && !fPrintProofOfStake)
    {
        LogPrintf("CheckStakeKernelHash() : check modifier=%s nTimeBlockFrom=%u nPrevout=%u nTimeBlock=%u hashProof=%s\n",
            nStakeModifier.GetHex().c_str(),
            blockFromTime, prevout.n, nTimeBlock,
            hashProofOfStake.ToString());
    }

    return true;
}

// Check kernel hash target and coinstake signature
bool CheckProofOfStake(CBlockIndex* pindexPrev, CValidationState& state, const CTransaction& tx, unsigned int nBits, uint32_t nTimeBlock, uint256& hashProofOfStake, uint256& targetProofOfStake, CCoinsViewCache& view)
{
    if (!tx.IsCoinStake())
        return error("CheckProofOfStake() : called on non-coinstake %s", tx.GetHash().ToString());

    // Kernel (input 0) must match the stake hash target (nBits)
    const CTxIn& txin = tx.vin[0];

    Coin coinPrev;

    if(!view.GetCoin(txin.prevout, coinPrev)){
        return state.DoS(100, error("CheckProofOfStake() : Stake prevout does not exist %s", txin.prevout.hash.ToString()));
    }

    if(pindexPrev->nHeight + 1 - coinPrev.nHeight < COINBASE_MATURITY){
        return state.DoS(100, error("CheckProofOfStake() : Stake prevout is not mature, expecting %i and only matured to %i", COINBASE_MATURITY, pindexPrev->nHeight + 1 - coinPrev.nHeight));
    }
    CBlockIndex* blockFrom = pindexPrev->GetAncestor(coinPrev.nHeight);
    if(!blockFrom) {
        return state.DoS(100, error("CheckProofOfStake() : Block at height %i for prevout can not be loaded", coinPrev.nHeight));
    }

    // Verify signature
    if (!VerifySignature(coinPrev, txin.prevout.hash, tx, 0, SCRIPT_VERIFY_NONE))
        return state.DoS(100, error("CheckProofOfStake() : VerifySignature failed on coinstake %s", tx.GetHash().ToString()));

    if (!CheckStakeKernelHash(pindexPrev, nBits, blockFrom->nTime, coinPrev.out.nValue, txin.prevout, nTimeBlock, hashProofOfStake, targetProofOfStake, logCategories & BCLog::COINSTAKE))
        return state.DoS(1, error("CheckProofOfStake() : INFO: check kernel failed on coinstake %s, hashProof=%s", tx.GetHash().ToString(), hashProofOfStake.ToString())); // may occur during initial download or if behind on block chain sync

    return true;
}

// Check whether the coinstake timestamp meets protocol
bool CheckCoinStakeTimestamp(uint32_t nTimeBlock)
{
    return (nTimeBlock & STAKE_TIMESTAMP_MASK) == 0;
}


bool CheckKernel(CBlockIndex* pindexPrev, unsigned int nBits, uint32_t nTimeBlock, const COutPoint& prevout, CCoinsViewCache& view)
{
    std::map<COutPoint, CStakeCache> tmp;
    return CheckKernel(pindexPrev, nBits, nTimeBlock, prevout, view, tmp);
}

bool CheckKernel(CBlockIndex* pindexPrev, unsigned int nBits, uint32_t nTimeBlock, const COutPoint& prevout, CCoinsViewCache& view, const std::map<COutPoint, CStakeCache>& cache)
{
    uint256 hashProofOfStake, targetProofOfStake;
    auto it=cache.find(prevout);
    if(it == cache.end()) {
        //not found in cache (shouldn't happen during staking, only during verification which does not use cache)
        Coin coinPrev;
        if(!view.GetCoin(prevout, coinPrev)){
            return false;
        }

        if(pindexPrev->nHeight + 1 - coinPrev.nHeight < COINBASE_MATURITY){
            return false;
        }
        CBlockIndex* blockFrom = pindexPrev->GetAncestor(coinPrev.nHeight);
        if(!blockFrom) {
            return false;
        }
        if(coinPrev.IsSpent()){
            return false;
        }

        return CheckStakeKernelHash(pindexPrev, nBits, blockFrom->nTime, coinPrev.out.nValue, prevout,
                                    nTimeBlock, hashProofOfStake, targetProofOfStake);
    }else{
        //found in cache
        const CStakeCache& stake = it->second;
        if(CheckStakeKernelHash(pindexPrev, nBits, stake.blockFromTime, stake.amount, prevout,
                                    nTimeBlock, hashProofOfStake, targetProofOfStake)){
            //Cache could potentially cause false positive stakes in the event of deep reorgs, so check without cache also
            return CheckKernel(pindexPrev, nBits, nTimeBlock, prevout, view);
        }
    }
    return false;
}

void CacheKernel(std::map<COutPoint, CStakeCache>& cache, const COutPoint& prevout, CBlockIndex* pindexPrev, CCoinsViewCache& view){
    if(cache.find(prevout) != cache.end()){
        //already in cache
        return;
    }

    Coin coinPrev;
    if(!view.GetCoin(prevout, coinPrev)){
        return;
    }

    if(pindexPrev->nHeight + 1 - coinPrev.nHeight < COINBASE_MATURITY){
        return;
    }
    CBlockIndex* blockFrom = pindexPrev->GetAncestor(coinPrev.nHeight);
    if(!blockFrom) {
        return;
    }

    CStakeCache c(blockFrom->nTime, coinPrev.out.nValue);
    cache.insert({prevout, c});
}

bool estimateNextStakeDifficulty(const Consensus::Params& consensusParams, const CBlockIndex* curNode, int64_t newTickets, bool useMaxTickets, int64_t& sBits){
	// Calculate the next retarget interval height.
	int64_t curHeight = 0;
	if(curNode != nullptr){
		curHeight = (int64_t)curNode->nHeight;
	}
	int64_t ticketMaturity = (int64_t)consensusParams.TicketMaturity;
	int64_t intervalSize = (int64_t)consensusParams.StakeDiffWindowSize;
	int64_t blocksUntilRetarget = intervalSize - curHeight % intervalSize;
	int64_t nextRetargetHeight = curHeight + blocksUntilRetarget;

	// Calculate the maximum possible number of tickets that could be sold
	// in the remainder of the interval and potentially override the number
	// of new tickets to include in the estimate per the user-specified
	// flag.
	int64_t maxTicketsPerBlock = (int64_t)consensusParams.MaxFreshStakePerBlock;
	int64_t maxRemainingTickets = (blocksUntilRetarget - 1) * maxTicketsPerBlock;
	if(useMaxTickets){
		newTickets = maxRemainingTickets;
	}

	// Ensure the specified number of tickets is not too high.
	if(newTickets > maxRemainingTickets){
		sBits = 0;
		error("%s: unable to create an estimated stake difficulty with %d tickets since it is more than "
				"the maximum remaining of %d", __func__, newTickets);
	}

	// Stake difficulty before any tickets could possibly be purchased is
	// the minimum value.
	int64_t stakeDiffStartHeight = (int64_t)consensusParams.CoinbaseMaturity + 1;
	if(nextRetargetHeight < stakeDiffStartHeight){
		sBits = consensusParams.MinimumStakeDiff;
		return true;
	}

	// Get the pool size and number of tickets that were immature at the
	// previous retarget interval
	//
	// NOTE: Since the stake difficulty must be calculated based on existing
	// blocks, it is always calculated for the block after a given block, so
	// the information for the previous retarget interval must be retrieved
	// relative to the block just before it to coincide with how it was
	// originally calculated.
	int64_t prevPoolSize = 0;
	int64_t prevImmatureTickets = 0;
	int64_t prevRetargetHeight = nextRetargetHeight - intervalSize - 1;
	const CBlockIndex* prevRetargetNode = curNode->GetAncestor(prevRetargetHeight);
	if(prevRetargetNode != nullptr){
		prevPoolSize = (int64_t)prevRetargetNode->poolSize;
		prevImmatureTickets = prevRetargetNode->sumPurchasedTickets(ticketMaturity);
	}

	// Return the existing ticket price for the first few intervals to avoid
	// division by zero and encourage initial pool population.
	int64_t curDiff = curNode->sBits;
	int64_t prevPoolSizeAll = prevPoolSize + prevImmatureTickets;
	if(prevPoolSizeAll == 0){
		sBits = curDiff;
		return true;
	}

	// Calculate the number of tickets that will still be immature at the
	// next retarget based on the known (non-estimated) data.
	//
	// Note that when the interval size is larger than the ticket maturity,
	// the current height might be before the maturity floor (the point
	// after which the remaining tickets will remain immature).  There are
	// therefore no possible remaining immature tickets from the blocks that
	// are not being estimated in that case.
	int64_t remainingImmatureTickets = 0;
	int64_t nextMaturityFloor = nextRetargetHeight - ticketMaturity - 1;
	if(curHeight > nextMaturityFloor){
		remainingImmatureTickets = curNode->sumPurchasedTickets(curHeight - nextMaturityFloor);
	}

	// Add the number of tickets that will still be immature at the next
	// retarget based on the estimated data.
	int64_t maxImmatureTickets = ticketMaturity * maxTicketsPerBlock;
	if(newTickets > maxImmatureTickets){
		remainingImmatureTickets += maxImmatureTickets;
	}
	else {
		remainingImmatureTickets += newTickets;
	}

	// Calculate the number of tickets that will mature in the remainder of
	// the interval based on the known (non-estimated) data.
	//
	// NOTE: The pool size in the block headers does not include the tickets
	// maturing at the height in which they mature since they are not
	// eligible for selection until the next block, so exclude them by
	// starting one block before the next maturity floor.
	int64_t finalMaturingHeight = nextMaturityFloor - 1;
	if(finalMaturingHeight > curHeight){
		finalMaturingHeight = curHeight;
	}
	const CBlockIndex* finalMaturingNode = curNode->GetAncestor(finalMaturingHeight);
	int64_t firstMaturingHeight = curHeight - ticketMaturity;
	if(firstMaturingHeight > curHeight){
		finalMaturingHeight = curHeight;
	}
	int64_t maturingTickets = 0;
	if(finalMaturingNode != nullptr){
		finalMaturingNode->sumPurchasedTickets(finalMaturingHeight - firstMaturingHeight + 1);
	}

	// Add the number of tickets that will mature based on the estimated data.
	//
	// Note that when the ticket maturity is greater than or equal to the
	// interval size, the current height will always be after the maturity
	// floor.  There are therefore no possible maturing estimated tickets
	// in that case.
	if(curHeight < nextMaturityFloor){
		int64_t maturingEstimateNodes = nextMaturityFloor - curHeight - 1;
		int64_t maturingEstimatedTickets = maxTicketsPerBlock * maturingEstimateNodes;
		if(maturingEstimatedTickets > newTickets){
			maturingEstimatedTickets = newTickets;
		}
		maturingTickets += maturingEstimatedTickets;
	}

	// Calculate the number of votes that will occur during the remainder of
	// the interval.
	int64_t stakeValidationHeight = consensusParams.StakeValidationHeight;
	int64_t pendingVotes = 0;
	if(nextRetargetHeight > stakeValidationHeight){
		int64_t votingBlocks = blocksUntilRetarget - 1;
		if(curHeight < stakeValidationHeight){
			votingBlocks = nextRetargetHeight - stakeValidationHeight;
		}
		int64_t votesPerBlock = consensusParams.TicketsPerBlock;
		pendingVotes = votingBlocks * votesPerBlock;
	}

	// Calculate what the pool size would be as of the next interval.
	int64_t curPoolSize = curNode->poolSize;
	int64_t estimatedPoolSize = curPoolSize + maturingTickets - pendingVotes;
	int64_t estimatedPoolSizeAll = estimatedPoolSize + remainingImmatureTickets;

	// Calculate and return the final estimated difficulty.
	sBits = calcNextStakeDiff(consensusParams, nextRetargetHeight, curDiff, prevPoolSizeAll, estimatedPoolSizeAll);
	return true;
}

bool estimateNextStakeDifficultyV2(const Consensus::Params& consensusParams, const CBlockIndex* curNode, int64_t& sBits){
	// Stake difficulty before any tickets could possibly be purchased is
	// the minimum value.
	int64_t nextHeight = 0;
	if(curNode != nullptr){
		nextHeight = (int64_t)curNode->nHeight + 1;
	}

	int64_t stakeDiffStartHeight = (int64_t)consensusParams.CoinbaseMaturity + 1;
	if(nextHeight < stakeDiffStartHeight){
		sBits = consensusParams.MinimumStakeDiff;
		return true;
	}

	// Return the previous block's difficulty requirements if the next block
	// is not at a difficulty retarget interval.
	int64_t intervalSize = (int64_t)consensusParams.StakeDiffWindowSize;
	int64_t ticketMaturity = (int64_t)consensusParams.TicketMaturity;
	int64_t curDiff = curNode->sBits;
	if(nextHeight % intervalSize != 0){
		sBits = curDiff;
		return true;
	}

	// Get the pool size and number of tickets that were immature at the
	// previous retarget interval
	//
	// NOTE: Since the stake difficulty must be calculated based on existing
	// blocks, it is always calculated for the block after a given block, so
	// the information for the previous retarget interval must be retrieved
	// relative to the block just before it to coincide with how it was
	// originally calculated.
	int64_t prevPoolSize = 0;
	int64_t prevImmatureTickets = 0;
	int64_t prevRetargetHeight = nextHeight - intervalSize - 1;
	const CBlockIndex* prevRetargetNode = curNode->GetAncestor(prevRetargetHeight);
	if(prevRetargetNode != nullptr){
		prevPoolSize = (int64_t)prevRetargetNode->poolSize;
		prevImmatureTickets = prevRetargetNode->sumPurchasedTickets(ticketMaturity);
	}

	// Return the existing ticket price for the first few intervals to avoid
	// division by zero and encourage initial pool population.
	int64_t prevPoolSizeAll = prevPoolSize + prevImmatureTickets;
	if(prevPoolSizeAll == 0){
		sBits = curDiff;
		return true;
	}

	// Count the number of currently immature tickets.
	int64_t immatureTickets = curNode->sumPurchasedTickets(ticketMaturity);

	// Calculate and return the final next required difficulty.
	int64_t curPoolSizeAll = (int64_t)curNode->poolSize + immatureTickets;
	sBits = calcNextStakeDiff(consensusParams, nextHeight, curDiff, prevPoolSizeAll, curPoolSizeAll);
	return true;

}

int64_t calcNextStakeDiff(const Consensus::Params& consensusParams, int32_t nHeight, int64_t curDiff, int64_t prevPoolSizeAll, int64_t curPoolSizeAll){

	// Shorter version of various parameter for convenience.
	int64_t votesPerBlock = (int64_t)consensusParams.TicketsPerBlock;
	int64_t ticketPoolSize = (int64_t)consensusParams.TicketPoolSize;
	int64_t ticketMaturity = (int64_t)consensusParams.TicketMaturity;

	// Calculate the difficulty by multiplying the old stake difficulty
	// with two ratios that represent a force to counteract the relative
	// change in the pool size (Fc) and a restorative force to push the pool
	// size  towards the target value (Fr).
	//
	// Per DCP0001, the generalized equation is:
	//
	//   nextDiff = min(max(curDiff * Fc * Fr, Slb), Sub)
	//
	// The detailed form expands to:
	//
	//                        curPoolSizeAll      curPoolSizeAll
	//   nextDiff = curDiff * ---------------  * -----------------
	//                        prevPoolSizeAll    targetPoolSizeAll
	//
	//   Slb = b.chainParams.MinimumStakeDiff
	//
	//               estimatedTotalSupply
	//   Sub = -------------------------------
	//          targetPoolSize / votesPerBlock
	//
	// In order to avoid the need to perform floating point math which could
	// be problematic across languages due to uncertainty in floating point
	// math libs, this is further simplified to integer math as follows:
	//
	//                   curDiff * curPoolSizeAll^2
	//   nextDiff = -----------------------------------
	//              prevPoolSizeAll * targetPoolSizeAll
	//
	// Further, the Sub parameter must calculate the denomitor first using
	// integer math.
	int64_t targetPoolSizeAll = votesPerBlock * (ticketPoolSize + ticketMaturity);
	const std::string& cpsaStr = i64tostr(curPoolSizeAll);
	BIGNUM *curPoolSizeAllBig = 0;
	BN_dec2bn((BIGNUM **)&curPoolSizeAllBig, cpsaStr.c_str());

	const std::string& cdStr = i64tostr(curDiff);
	BIGNUM *nextDiffBig = 0;
	BN_dec2bn((BIGNUM **)&nextDiffBig, cdStr.c_str());

	const std::string& ppsaStr = i64tostr(prevPoolSizeAll);
	BIGNUM *prevPoolSizeAllBig = 0;
	BN_dec2bn((BIGNUM **)&prevPoolSizeAllBig, ppsaStr.c_str());

	const std::string& tpsaStr = i64tostr(targetPoolSizeAll);
	BIGNUM *targetPoolSizeAllBig = 0;
	BN_dec2bn((BIGNUM **)&targetPoolSizeAllBig, tpsaStr.c_str());

	BN_mul(nextDiffBig, nextDiffBig, curPoolSizeAllBig, BN_CTX_new());
	BN_mul(nextDiffBig, nextDiffBig, curPoolSizeAllBig, BN_CTX_new());
	BN_div(nextDiffBig, NULL, nextDiffBig, prevPoolSizeAllBig, BN_CTX_new());
	BN_div(nextDiffBig, NULL, nextDiffBig, targetPoolSizeAllBig, BN_CTX_new());

	// make int64
	const std::string& ndbStr(BN_bn2dec(nextDiffBig));
	int64_t nextDiff = atoi64(ndbStr);

	// Limit the new stake difficulty between the minimum allowed stake
	// difficulty and a maximum value that is relative to the total supply.
	//
	// NOTE: This is intentionally using integer math to prevent any
	// potential issues due to uncertainty in floating point math libs.  The
	// ticketPoolSize parameter already contains the result of
	// (targetPoolSize / votesPerBlock).
	if(nextDiff > consensusParams.MaxStakeDiff){
		nextDiff = consensusParams.MaxStakeDiff;
	}
	if(nextDiff < consensusParams.MinimumStakeDiff){
		nextDiff = consensusParams.MinimumStakeDiff;
	}
	return nextDiff;
}

